/******************************************************************************
 * This file was generated by langium-cli 3.3.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import type { AstNode, Reference, ReferenceInfo, TypeMetaData } from 'langium';
import { AbstractAstReflection } from 'langium';

export const DaliMovieTerminals = {
    WS: /\s+/,
    ID: /[_a-zA-Z][\w_]*/,
    QUOTED_STRING: /(["'])(?:(?=(\\?))\2.)*?\1/,
    TIME: /\d+(m\d+)?s/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /\/\/[^\n\r]*/,
};

export type DaliMovieTerminalNames = keyof typeof DaliMovieTerminals;

export type DaliMovieKeywordNames = 
    | "add"
    | "after"
    | "audio"
    | "before"
    | "cut"
    | "end"
    | "for"
    | "from"
    | "import"
    | "named"
    | "start"
    | "subtitle"
    | "title"
    | "to"
    | "video";

export type DaliMovieTokenNames = DaliMovieTerminalNames | DaliMovieKeywordNames;

export type Command = AddMedia | AddText | Cut | LoadAudio | LoadVideo;

export const Command = 'Command';

export function isCommand(item: unknown): item is Command {
    return reflection.isInstance(item, Command);
}

export type Media = Cut | LoadAudio | LoadVideo;

export const Media = 'Media';

export function isMedia(item: unknown): item is Media {
    return reflection.isInstance(item, Media);
}

export type Video = AddText | Cut | LoadVideo;

export const Video = 'Video';

export function isVideo(item: unknown): item is Video {
    return reflection.isInstance(item, Video);
}

export interface AddMedia extends AstNode {
    readonly $container: Script;
    readonly $type: 'AddMedia';
    mediaRef: Reference<Media>;
    offset?: string;
    position?: 'after' | 'before';
    referential?: Reference<Video>;
}

export const AddMedia = 'AddMedia';

export function isAddMedia(item: unknown): item is AddMedia {
    return reflection.isInstance(item, AddMedia);
}

export interface AddText extends AstNode {
    readonly $container: Script;
    readonly $type: 'AddText';
    content: string;
    duration: string;
    name?: string;
    offset?: string;
    position?: 'after' | 'before';
    referential?: Reference<Video>;
    type: 'subtitle' | 'title';
}

export const AddText = 'AddText';

export function isAddText(item: unknown): item is AddText {
    return reflection.isInstance(item, AddText);
}

export interface Cut extends AstNode {
    readonly $container: Script;
    readonly $type: 'Cut';
    duration: string;
    from: 'end' | 'start' | string;
    name: string;
    videoRef: Reference<LoadVideo>;
}

export const Cut = 'Cut';

export function isCut(item: unknown): item is Cut {
    return reflection.isInstance(item, Cut);
}

export interface LoadAudio extends AstNode {
    readonly $container: Script;
    readonly $type: 'LoadAudio';
    file: string;
    name: string;
}

export const LoadAudio = 'LoadAudio';

export function isLoadAudio(item: unknown): item is LoadAudio {
    return reflection.isInstance(item, LoadAudio);
}

export interface LoadVideo extends AstNode {
    readonly $container: Script;
    readonly $type: 'LoadVideo';
    file: string;
    name: string;
}

export const LoadVideo = 'LoadVideo';

export function isLoadVideo(item: unknown): item is LoadVideo {
    return reflection.isInstance(item, LoadVideo);
}

export interface Script extends AstNode {
    readonly $type: 'Script';
    commands: Array<Command>;
}

export const Script = 'Script';

export function isScript(item: unknown): item is Script {
    return reflection.isInstance(item, Script);
}

export type DaliMovieAstType = {
    AddMedia: AddMedia
    AddText: AddText
    Command: Command
    Cut: Cut
    LoadAudio: LoadAudio
    LoadVideo: LoadVideo
    Media: Media
    Script: Script
    Video: Video
}

export class DaliMovieAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return [AddMedia, AddText, Command, Cut, LoadAudio, LoadVideo, Media, Script, Video];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case AddMedia: {
                return this.isSubtype(Command, supertype);
            }
            case AddText: {
                return this.isSubtype(Command, supertype) || this.isSubtype(Video, supertype);
            }
            case Cut:
            case LoadVideo: {
                return this.isSubtype(Command, supertype) || this.isSubtype(Media, supertype) || this.isSubtype(Video, supertype);
            }
            case LoadAudio: {
                return this.isSubtype(Command, supertype) || this.isSubtype(Media, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'AddMedia:mediaRef': {
                return Media;
            }
            case 'AddMedia:referential':
            case 'AddText:referential': {
                return Video;
            }
            case 'Cut:videoRef': {
                return LoadVideo;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case AddMedia: {
                return {
                    name: AddMedia,
                    properties: [
                        { name: 'mediaRef' },
                        { name: 'offset' },
                        { name: 'position' },
                        { name: 'referential' }
                    ]
                };
            }
            case AddText: {
                return {
                    name: AddText,
                    properties: [
                        { name: 'content' },
                        { name: 'duration' },
                        { name: 'name' },
                        { name: 'offset' },
                        { name: 'position' },
                        { name: 'referential' },
                        { name: 'type' }
                    ]
                };
            }
            case Cut: {
                return {
                    name: Cut,
                    properties: [
                        { name: 'duration' },
                        { name: 'from' },
                        { name: 'name' },
                        { name: 'videoRef' }
                    ]
                };
            }
            case LoadAudio: {
                return {
                    name: LoadAudio,
                    properties: [
                        { name: 'file' },
                        { name: 'name' }
                    ]
                };
            }
            case LoadVideo: {
                return {
                    name: LoadVideo,
                    properties: [
                        { name: 'file' },
                        { name: 'name' }
                    ]
                };
            }
            case Script: {
                return {
                    name: Script,
                    properties: [
                        { name: 'commands', defaultValue: [] }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}

export const reflection = new DaliMovieAstReflection();
